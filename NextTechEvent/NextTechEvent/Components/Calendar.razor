@using System.Globalization
@using NextTechEvent.Data.Index
@inject INextTechEventApi _api

<div class="yearselector">
    <a href="#" @onclick:preventDefault @onclick="@(async()=>{Year--;await LoadAsync();})">&#60;</a>
    <h2>@Year</h2>
    <a href="#" @onclick:preventDefault @onclick="@(async()=>{Year++;await LoadAsync();})">&#62;</a>
</div>

<input type="text" placeholder="Search for conference name, city, country or tags" class="search" @bind="searchterm" @onkeypress="Search" @bind:event="oninput" />

<table border="1">
    <tr>
        <th></th>
        @for (int month = 1; month <= 12; month++)
        {
            <th>@CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(month)</th>
        }
    </tr>
    @for (int day = 1; day <= 31; day++)
    {
        <tr>
            <td>@day</td>
            @for (int month = 1; month <= 12; month++)
            {
                @if (DateTime.DaysInMonth(Year, month) >= day)
                {
                    var d = new DateOnly(Year, month, day);
                    var count = dates.Where(a => a.Date == d).Sum(a=>a.Count);
                    <td class="@HeatMapColor(count)" @onclick="@(()=>ShowConferences(d))">
                        <small>@d.DayOfWeek</small>    
                        @count
                    </td>
                    
                }
                else
                {
                    <td></td>
                }
            }
        </tr>
    }
</table>

@if(showConferenses)
{
    <OverlappingConferences Start="showConferensesDate" End="showConferensesDate" />
}

@code {
    [Parameter]
    public int Year { get; set; } = DateTime.Now.Year;

    string searchterm = "";
    async Task Search(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await LoadAsync();
        }
    }


    List<ConferenceCountByDate> dates = new();
    int max = 1;

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
        await base.OnParametersSetAsync();
    }

    private async Task LoadAsync()
    {
        if(Year==0)
        {
            Year=DateTime.Now.Year; 
        }
        
        DateOnly start = new DateOnly(Year, 1, 1);
        DateOnly end = new DateOnly(Year, 12, 31);
        dates = await _api.GetConferenceCountByDate(start, end,searchterm);
        if (dates.Count > 0)
        {
            max = dates.GroupBy(d => d.Date).Max(a => a.Sum(c => c.Count));
        }
    }

    public string HeatMapColor(decimal value)
    {
        decimal val = value / max;

        return val switch
        {
            0 => "Color0",
            > 0 and <= 0.2M => "Color1",
            > 0.2M and <= 0.4M => "Color20",
            > 0.4M and <= 0.6M => "Color40",
            > 0.6M and <= 0.8M => "Color60",
            _ => "Color80"
        };
    }

    bool showConferenses = false;
    DateOnly showConferensesDate=DateOnly.FromDateTime(DateTime.Now);
    void ShowConferences(DateOnly date)
    {
        showConferensesDate = date;
        showConferenses = true;
    }
}
