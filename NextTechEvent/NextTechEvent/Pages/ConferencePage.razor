@page "/conferences/{*ConferenceId}"
@using System.Globalization
@using Raven.Client.Documents.Session.TimeSeries

@inject INextTechEventApi _api
@if (conference != null)
{
    <div class="container mt-4">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="display-4">@conference.Name</h1>
                <p class="lead"><i class="bi bi-calendar-check-fill"></i>@conference.EventStart.ToString("MMMM dd, yyyy",culture) - @conference.EventEnd.ToString("MMMM dd, yyyy",culture)</p>
                <p class="lead"><i class="bi bi-geo-alt-fill"></i><a href="@($"/geo/{conference.Id}")">@conference.GetLocation()</a></p>
                @if (!string.IsNullOrEmpty(conference.CfpUrl))
                {
                    <p class="lead"><i class="bi bi-megaphone-fill"></i><a href="@conference.CfpUrl" target="_blank">Call for Papers</a> &nbsp;
                        @if (conference.CfpEndDate > DateTime.Now)
                        {
                            <text>closing in</text>
                        }
                        
                        &nbsp;@conference.CfpEndDate.ToClosingIn()
                    </p>
                }
                @if (!string.IsNullOrEmpty(conference.EventUrl))
                {
                    <p class="lead"><i class="bi bi-link-45deg"></i><a href="@conference.EventUrl" target="_blank">Conference Link</a></p>
                }
                <ConferenceStatus ConferenceId="@conference.Id" />
            </div>
            <div class="col-md-4">
                @if (!string.IsNullOrEmpty(conference.ImageUrl) && conference.ImageUrl != "https://sessionize.com/landing/images/brand/social/image.png") {
                    <img class="img-fluid conferenceimage" src="@conference.ImageUrl">
                }
            </div>
        </div>
        @if (weather != null && weather.Any())
        {
            <div class="row mt-3">
                <div class="card">
                    <div class="card-body">

                        <div class="temperatures">
                            @foreach (var temp in weather)
                            {
                                <div class="temperature-item">
                                    <i class="icon @GetWeatherIcon(temp.Value.Average)"></i>
                                    <div class="temp-date">
                                        <h2 class="temperature">@temp.Value.Average.ToString("N1",culture)°C</h2>
                                        <p class="date">@temp.Timestamp.ToString("MMM dd") </p>                
                                    </div>
                                </div>
                            }
                        </div>
                        
                    </div>
            </div>
        </div>
        }
        <div class="row mt-5">
            <OverlappingConferences Start="conference.EventStart" End="conference.EventEnd" />
        </div>
    </div>
}

@code {
    [Parameter]
    public string ConferenceId { get; set; }
    Conference? conference = null;
    CultureInfo culture = CultureInfo.GetCultureInfo("en-US");
    TimeSeriesEntry<WeatherData>[] weather = new TimeSeriesEntry<WeatherData>[0];

    protected override async Task OnParametersSetAsync() {
        conference = await _api.GetConferenceAsync(ConferenceId);
        weather = await _api.GetWeatherTimeSeriesAsync(ConferenceId);
        await base.OnParametersSetAsync();
    }

    string GetWeatherIcon(double temperature) {
        if (temperature <= 10) {
            return "bi-thermometer-snow";
        }
        else if (temperature > 10 && temperature <= 20) {
            return "bi-thermometer-sun";
        }
        else {
            return "bi-thermometer-high";
        }
    }
}
