@page "/conferences/{*ConferenceId}"
@using System.Globalization
@using Raven.Client.Documents.Session.TimeSeries

@inject INextTechEventApi _api
@if (conference != null)
{
    <div class="container mt-4">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="display-4">@conference.Name</h1>
                <p class="lead"><i class="bi bi-calendar-check-fill"></i> @conference.EventStart.ToString("MMMM dd, yyyy",culture) - @conference.EventEnd.ToString("MMMM dd, yyyy",culture)</p>
                <p class="lead"><i class="bi bi-geo-alt-fill"></i> @conference.City</p>
                <ConferenceStatus ConferenceId="@conference.Id" />
            </div>
            <div class="col-md-4">
                @if (!string.IsNullOrEmpty(conference.ImageUrl) && conference.ImageUrl != "https://sessionize.com/landing/images/brand/social/image.png") {
                    <img class="img-fluid conferenceimage" src="@conference.ImageUrl">
                }
            </div>
        </div>

        <div class="row mt-5">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        @if (weather != null) {
                            @foreach (var temp in weather) 
                            {
                                <i class="icon @GetWeatherIcon(temp.Value.Average)"></i>
                                <h2 class="temperature">@temp.Value.Average.ToString("N1",culture)°C</h2>
                                <p class="date">@temp.Timestamp.ToString("MMM dd") </p>                
                            }
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Conference Links</h5>
                        @if (conference.CfpEndDate > DateTime.Now && !string.IsNullOrEmpty(conference.CfpUrl))
                        {
                            <p class="card-text"><i class="bi bi-megaphone-fill"></i> <a href="@conference.CfpUrl" target="_blank">Call for Papers</a> closing in @conference.CfpEndDate.ToClosingIn()</p>
                        }
                        @if (!string.IsNullOrEmpty(conference.EventUrl))
                        {
                            <p class="card-text"><i class="bi bi-link-45deg"></i> <a href="@conference.EventUrl">Conference Link</a></p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-5">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <OverlappingConferences Start="conference.EventStart" End="conference.EventEnd" />
                    </div>
                </div>
            </div>
        </div>

       @* <div class="row mt-5">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">My participation</h5>
                        <ul>
                            <li><i class="bi bi-file-earmark-arrow-up-fill"></i> Submitted Call for paper</li>
                            <li><i class="bi bi-star-fill"></i> Interested</li>
                            <li><i class="bi bi-microphone-fill"></i> Spoke at</li>
                            <li><i class="bi bi-check2-circle"></i> Accepted</li>
                            <li><i class="bi bi-x-circle"></i> Rejected</li>
                            <li><i class="bi bi-person-fill"></i> Attended</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>*@
    </div>
}

@code {
    [Parameter]
    public string ConferenceId { get; set; }
    Conference? conference = null;
    CultureInfo culture = CultureInfo.GetCultureInfo("en-US");
    TimeSeriesEntry<WeatherData>[] weather = null;

    protected override async Task OnParametersSetAsync() {
        conference = await _api.GetConferenceAsync(ConferenceId);
        weather = await _api.GetWeatherTimeSeriesAsync(ConferenceId);
        await base.OnParametersSetAsync();
    }

    string GetWeatherIcon(double temperature) {
        if (temperature <= 10) {
            return "bi-thermometer-snow";
        }
        else if (temperature > 10 && temperature <= 20) {
            return "bi-thermometer-sun";
        }
        else {
            return "bi-thermometer-high";
        }
    }
}